(define (rpn xs)
  (define (op? x)
    (cond ((or (eq? '+ x) (eq? '- x)) 1)
          ((or (eq? '* x) (eq? '/ x)) 2)
          (else                       0)))
  
  (define (helper out stack xs)
    (if (null? xs)
        (let loop ((nout out)
                   (nstk stack))
          (if (null? nstk)
              (reverse nout)
              (let ((nk (car nstk))
                    (ns (cdr nstk)))
                (if (eq? nk '<)
                    (loop nout ns)
                    (loop (cons nk nout) ns)))))
        (let* ((x (car xs))
               (s (cdr xs))
               (o (op? x)))
          (cond ((eq? x '<) (helper out (cons x stack) s))
                ((eq? x '>) (let loop ((nout out)
                                       (nstk stack))
                              (if (null? nstk)
                                  (helper nout nstk s)
                                  (let ((nk (car nstk))
                                        (ns (cdr nstk)))
                                    (if (eq? nk '<)
                                        (helper nout ns s)
                                        (loop (cons nk nout) ns))))))
                ((> o 0)    (let loop ((nout out)
                                       (nstk stack))
                              (if (null? nstk)
                                  (helper nout (list x) s)
                                  (let ((nk (car nstk))
                                        (ns (cdr nstk)))
                                    (if (>= (op? nk) o)
                                        (loop (cons nk nout) ns)
                                        (helper nout (cons x nstk) s))))))
                (else       (helper (cons x out) stack s))))))
  
  (helper '() '() xs))