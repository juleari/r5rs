(define (tokenize str)
  (define (append-x x xs)
    (if x
        (cons x xs)
        xs))
  
  (define (concat-symbols a . b)
    (if (symbol? a)
        (if (null? b)
            a
            (apply concat-symbols (cons (string->symbol (string-append (symbol->string a)
                                                                       (symbol->string (car b))))
                                        (cdr b))))
        (apply concat-symbols b)))
  
  (define (trim? s)
    (or (eqv? s #\space)
        (eqv? s #\newline)
        (eqv? s #\tab)))
  
  (define (op? s)
    (or (eqv? s #\+)
        (eqv? s #\-)
        (eqv? s #\*)
        (eqv? s #\/)
        (eqv? s #\^)))
  
  (define (sym? x)
    (let ((ordx (char->integer x))
          (orda (char->integer #\a))
          (ordz (char->integer #\z))
          (ordb (char->integer #\A))
          (ordy (char->integer #\Z)))
      (or (and (>= ordx orda)
               (<= ordx ordz))
          (and (>= ordx ordb)
               (<= ordx ordy)))))

  (define (digit? x)
    (let ((ordx (char->integer x))
          (ord0 (char->integer #\0))
          (ord9 (char->integer #\9)))
      (and (>= ordx ord0)
           (<= ordx ord9)
           (-  ordx ord0))))
  
  (define (num str)
    (define (helper xs int b digit real)
      (if (null? xs)
          (list int)
          (let* ((x (car xs))
                 (s (cdr xs))
                 (d (digit? x))
                 (n (if real (/ b 10) 10))
                 (i (and d
                         (or (and real (+ (* d b) int))
                             (+ (* int 10) d)))))
            (or (and (eq? x #\.) digit (not real) (null? s) (helper s int 0.1 digit #t))
                (and d (helper s i n #t real))
                (and (not digit) (cons #f xs))
                (and digit (cons int xs))))))
    
    (helper str 0 1 #f #f))
  
  (define (aren? s)
    (or (eqv? s #\()
        (eqv? s #\))))
  
  (define (helper str token tokens)
    (if (null? str)
        (reverse (append-x token tokens))
        (let* ((s (car str))
               (t (cdr str))
               (n (num str))
               (i (car n))
               (d (cdr n)))
          (cond ((trim? s) (helper t #f (append-x token tokens)))
                ((op?   s) (helper t #f (cons (string->symbol (string s)) (append-x token tokens))))
                ((and i token)
                 (helper d
                         (concat-symbols token
                                         (string->symbol (number->string i)))
                         tokens))
                (i (helper d #f (cons i tokens)))
                ((aren? s) (helper t #f (cons (string s) tokens)))
                ((sym?  s) (helper t (concat-symbols token (string->symbol (string s))) tokens))))))
  
  (helper (string->list str) #f '()))