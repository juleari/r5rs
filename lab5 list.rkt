(define (my-range a b d)
  (if (< a b)
      (append (list a) (my-range (+ a d) b d))
      '()))

(define (my-flatten a)
  (if (null? a)
      '()
      (let ((x (car a)))
        (if (list? x)
            (append (my-flatten x) (my-flatten (cdr a)))
            (append (list x) (my-flatten (cdr a)))))))

(define (my-element? x xs)
  (cond ((null? xs)          #f)
        ((equal? x (car xs)) #t)
        (else                (my-element? x (cdr xs)))))

(define (my-filter pred? xs)
  (if (null? xs)
      '()
      (let ((x (car xs)))
        (if (pred? x)
            (append (list x) (my-filter pred? (cdr xs)))
            (my-filter pred? (cdr xs))))))

(define (my-fold-left op xs)
  (if (= (length xs) 2)
      (op (car xs) (cadr xs))
      (op (my-fold-left op (reverse (cdr (reverse xs)))) (car (reverse xs)))))

(define (my-fold-right op xs)
  (if (= (length xs) 2)
      (op (car xs) (cadr xs))
      (op (car xs) (my-fold-right op (cdr xs)))))

(my-range  0 11 3)
(my-flatten '((1) 2 (3 (4 5) (6 (7 8))) 9))
(my-element? 1 '(3 2 1)) 
(my-element? 4 '(3 2 1))
(my-filter odd? (my-range 0 10 1)) 
(my-filter (lambda (x) (= (remainder x 3) 0)) (my-range 0 13 1))

(my-fold-left  quotient '(16 2 2 2 2))
(my-fold-right expt     '(2 3 4))