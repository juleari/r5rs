(define (interpret program stack)
  (define (op? x)
    (or (eq? x '+)
        (eq? x '-)
        (eq? x '*)
        (eq? x '/)))
  
  (define (scan i data return dict)
    (if (eq? i (vector-length program))
        stack
        (let* ((word (vector-ref program i))
               (func (assoc word dict)))
          (cond (func (scan (cadr func) stack (cons (+ i 1) return) dict))
                ((number? word) (scan (+ 1 i) (cons word stack) return dict))
                ((eq? word 'define) (let loop ((ind (+ 2 i)))
                                      (if (eq? (vector-ref program ind) 'end)
                                          (scan ind stack return
                                                (cons (vector-ref program (+ 1 i)) dict))
                                          (loop (+ 1 ind)))))
                ((eq? word 'if) (if (zero? (car stack))
                                    (let loop ((ind (+ 1 i)))
                                      (if (eq? (vector-ref program ind) 'endif)
                                          (scan (+ 1 ind) stack return dict)
                                          (loop (+ 1 ind))))))
                ((op? word) (eval (cons (word (cadr stack) (car stack)) (cddr stack))
                                  (interaction-environment)))))))
  
  (define (basedict stack)
    (list (list '+    `(cons (+ (cadr (list ,@stack)) (car (list ,@stack))) (cddr (list ,@stack))))
          '(list '-    (cons (- (cadr stack) (car stack)) (cddr stack)))
          '(*    '(cons (* (cadr stack) (car stack)) (cddr stack)))
          '(/    '(cons (/ (cadr stack) (car stack)) (cddr stack)))
          '(mod  '(cons (remainder (cadr stack) (car stack)) (cddr stack)))
          '(neg  '(cons (- (car stack)) (cdr stack)))
          '(=    '(cons (if (= (cadr stack) (car stack)) -1 0) (cddr stack)))
          '(>    '(cons (if (> (cadr stack) (car stack)) -1 0) (cddr stack)))
          '(<    '(cons (if (< (cadr stack) (car stack)) -1 0) (cddr stack)))
          '(drop '(cdr stack))
          '(swap '(append (list (cadr stack) (car stack)) (cddr stack)))
          '(dup  '(cons (car stack) stack))
          '(over '(cons (cadr stack) stack))
          '(rot  '(append (list (caddr stack) (cadr stack) (car stack)) (cdddr stack)))
          '(deth '(cons (length stack) stack))))
  (scan 0 stack '() basedict))